[{"name":"app.R","content":"# Carregue as bibliotecas necessárias\nlibrary(shiny)\nlibrary(DT)\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(openxlsx)\nlibrary(shinyjs)\nlibrary(bslib)\n\n# UI\nui <- fluidPage(\n  theme = bs_theme(bootswatch = \"flatly\"),  # Tema inicial\n  useShinyjs(),  # Ativa o shinyjs para funcionalidades adicionais\n  titlePanel(\"Orçamento Mensal\"),  # Título do aplicativo\n  \n  # Seção para carregar e exportar dados de um arquivo CSV\n  fluidRow(\n    column(width = 6, fileInput(\"file_input\", \"Escolher Arquivo CSV\", accept = c(\".csv\"))),\n    column(width = 4, downloadButton(\"export_data\", \"Exportar para CSV\"))  # Botão para exportar dados para CSV\n  ),\n  \n  # Painel principal com cards para diferentes visualizações\n  fluidRow(\n    # Card para tabela de entradas\n    column(\n      width = 12,\n      div(class = \"card\", style = \"margin: 10px;\",\n          div(class = \"card-header\", h4(\"Tabela de Entradas\")),\n          div(class = \"card-body\",\n              fluidRow(\n                column(width = 3, textInput(\"entry_name\", \"Nome da Entrada\")),\n                column(width = 3, numericInput(\"entry_amount\", \"Valor da Entrada\", value = 0)),\n                column(width = 3, textInput(\"entry_category\", \"Categoria da Entrada\")),\n                column(width = 3, actionButton(\"add_entry\", \"Adicionar Entrada\"),\n                       actionButton(\"remove_entry\", \"Remover Entrada Selecionada\"))\n              ),\n              DTOutput(\"entries_table\")\n          )\n      )\n    )\n  ),\n  fluidRow(\n    # Card para tabela de saídas\n    column(\n      width = 12,\n      div(class = \"card\", style = \"margin: 10px;\",\n          div(class = \"card-header\", h4(\"Tabela de Saídas\")),\n          div(class = \"card-body\",\n              fluidRow(\n                column(width = 3, textInput(\"expense_name\", \"Nome da Saída\")),\n                column(width = 3, numericInput(\"expense_amount\", \"Valor da Saída\", value = 0)),\n                column(width = 3, textInput(\"expense_category\", \"Categoria da Saída\")),\n                column(width = 3, actionButton(\"add_expense\", \"Adicionar Saída\"),\n                       actionButton(\"remove_expense\", \"Remover Saída Selecionada\"))\n              ),\n              DTOutput(\"expenses_table\")\n          )\n      )\n    )\n  ),\n  fluidRow(\n    # Card para análise financeira\n    column(\n      width = 12,\n      div(class = \"card\", style = \"margin: 10px;\",\n          div(class = \"card-header\", h4(\"Análise Financeira\")),\n          div(class = \"card-body\", plotlyOutput(\"financial_plot\"))\n      )\n    )\n  ),\n  fluidRow(\n    # Card para balanço final e separação do orçamento\n    column(\n      width = 12,\n      div(class = \"card\", style = \"margin: 10px;\",\n          div(class = \"card-header\", h4(\"Balanço Final e Separação do Orçamento\")),\n          div(class = \"card-body\", plotlyOutput(\"balance_plot\"))\n      )\n    )\n  ),\n  fluidRow(\n    # Card para a tabela completa e exportação em CSV\n    column(\n      width = 12,\n      div(class = \"card\", style = \"margin: 10px;\",\n          div(class = \"card-header\", h4(\"Tabela Completa para Exportação\")),\n          div(class = \"card-body\", DTOutput(\"full_data_table\"))\n      )\n    )\n  )\n)\n\n# Server\nserver <- function(input, output, session) {\n    entries_df <- data.frame(Name = character(), Amount = numeric(), Category = character(), stringsAsFactors = FALSE)\n    expenses_df <- data.frame(Name = character(), Amount = numeric(), Category = character(), stringsAsFactors = FALSE)\n\n  # Cria reativos para armazenar as entradas e saídas\n  entries <- reactiveVal(entries_df)\n  expenses <- reactiveVal(expenses_df)\n  \n  # Observa mudanças e salva dados em controle.csv\n  save_data_to_csv <- function() {\n    full_data <- bind_rows(\n      entries() %>% mutate(Type = \"Entrada\"),\n      expenses() %>% mutate(Type = \"Saída\")\n    )\n    write.csv(full_data, \"controle.csv\", row.names = FALSE)\n  }\n  \n  observeEvent(entries(), { save_data_to_csv() })\n  observeEvent(expenses(), { save_data_to_csv() })\n  \n  # Adiciona uma nova entrada\n  observeEvent(input$add_entry, {\n    new_entry <- data.frame(Name = input$entry_name, Amount = input$entry_amount, Category = input$entry_category, stringsAsFactors = FALSE)\n    entries(rbind(entries(), new_entry))\n  })\n  \n  # Remove a entrada selecionada\n  observeEvent(input$remove_entry, {\n    selected <- input$entries_table_rows_selected\n    if (length(selected) > 0) {\n      entries(entries()[-selected, ])\n    }\n  })\n  \n  # Adiciona uma nova saída\n  observeEvent(input$add_expense, {\n    new_expense <- data.frame(Name = input$expense_name, Amount = input$expense_amount, Category = input$expense_category, stringsAsFactors = FALSE)\n    expenses(rbind(expenses(), new_expense))\n  })\n  \n  # Remove a saída selecionada\n  observeEvent(input$remove_expense, {\n    selected <- input$expenses_table_rows_selected\n    if (length(selected) > 0) {\n      expenses(expenses()[-selected, ])\n    }\n  })\n  \n  # Renderiza as tabelas\n  output$entries_table <- renderDT({ datatable(entries(), selection = 'single') })\n  output$expenses_table <- renderDT({ datatable(expenses(), selection = 'single') })\n  \n  # Carrega dados automaticamente assim que o arquivo é selecionado\n  observeEvent(input$file_input, {\n    req(input$file_input)\n    full_data <- read.csv(input$file_input$datapath)\n    entries(full_data %>% filter(Type == \"Entrada\") %>% select(-Type))\n    expenses(full_data %>% filter(Type == \"Saída\") %>% select(-Type))\n  })\n  \n  # Cria um gráfico interativo das entradas e saídas categorizadas\n  output$financial_plot <- renderPlotly({\n    all_data <- bind_rows(\n      entries() %>% mutate(Type = \"Entrada\"),\n      expenses() %>% mutate(Type = \"Saída\") %>% mutate(Amount = -Amount)\n    ) %>%\n      group_by(Category, Type) %>%\n      summarise(Total = sum(Amount, na.rm = TRUE)) %>%\n      ungroup()\n    \n    plot_ly(all_data, x = ~Category, y = ~Total, color = ~Type, type = 'bar', text = ~Total, textposition = 'outside') %>%\n      layout(title = \"Análise Financeira por Categoria\")\n  })\n  \n  # Cria um gráfico para balanço final e separação do orçamento\n  output$balance_plot <- renderPlotly({\n    total_entry <- sum(entries()$Amount, na.rm = TRUE)\n    total_expense <- sum(expenses()$Amount, na.rm = TRUE)\n    balance <- total_entry - total_expense\n    \n    receitas_fixas <- total_entry * 0.5\n    investimentos <- total_entry * 0.3\n    lazer <- total_entry * 0.2\n    \n    balance_data <- data.frame(\n      Categoria = c(\"Balanço Total\", \"Receitas Fixas\", \"Investimentos\", \"Lazer\"),\n      Valor = c(balance, receitas_fixas, investimentos, lazer)\n    )\n    \n    plot_ly(balance_data, x = ~Categoria, y = ~Valor, type = 'bar', text = ~Valor, textposition = 'outside') %>%\n      layout(title = \"Balanço Final e Separação do Orçamento\")\n  })\n  \n  # Renderiza a tabela completa para exportação com botões\n  output$full_data_table <- renderDT({\n    datatable(\n      bind_rows(\n        entries() %>% mutate(Type = \"Entrada\"),\n        expenses() %>% mutate(Type = \"Saída\")\n      ),\n      rownames = FALSE,  # Remove os nomes das linhas\n      extensions = 'Buttons',\n      options = list(\n        dom = 'Bfrtip',\n        buttons = list(\n          list(\n            extend = 'csv',\n            text = 'Exportar'  # Personaliza o texto do botão para 'Exportar'\n          )\n        )\n      )\n    )\n  })\n  \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"LEo.csv","content":"Name,Amount,Category,Type\r\nSalário,100,Receita Fixa,Entrada\r\nFreelance,1500,Receita Extra,Entrada\r\nAluguel,750,Moradia,Saída\r\nSupermercado,600,Alimentação,Saída\r\nRestaurante,100,Alimentação,Saída\r\nAcademia,50,Lazer,Saída\r\nInvestimento Ações,1500,Investimentos,Saída\r\n","type":"text"},{"name":"LEo2.csv","content":"\"Name\",\"Amount\",\"Category\",\"Type\"\n\"Salário\",100,\"Receita Fixa\",\"Entrada\"\n\"Freelance\",1500,\"Receita Extra\",\"Entrada\"\n\"paciente 1\",250,\"pacientes\",\"Entrada\"\n\"Salário\",5000,\"Salário\",\"Entrada\"\n\"Aluguel\",750,\"Moradia\",\"Saída\"\n\"Supermercado\",600,\"Alimentação\",\"Saída\"\n\"Restaurante\",100,\"Alimentação\",\"Saída\"\n\"Academia\",50,\"Lazer\",\"Saída\"\n\"Investimento Ações\",1500,\"Investimentos\",\"Saída\"\n","type":"text"},{"name":"Orcamento_Mensal2024-11-03.csv","content":"\"Name\",\"Amount\",\"Category\",\"Type\"\n\"Salário\",100,\"Receita Fixa\",\"Entrada\"\n\"Freelance\",1500,\"Receita Extra\",\"Entrada\"\n\"paciente 1\",250,\"pacientes\",\"Entrada\"\n\"Salário\",5000,\"Salário\",\"Entrada\"\n\"Aluguel\",750,\"Moradia\",\"Saída\"\n\"Supermercado\",600,\"Alimentação\",\"Saída\"\n\"Restaurante\",100,\"Alimentação\",\"Saída\"\n\"Academia\",50,\"Lazer\",\"Saída\"\n\"Investimento Ações\",1500,\"Investimentos\",\"Saída\"\n","type":"text"},{"name":"Orçamento Mensal.csv","content":"\"Name\",\"Amount\",\"Category\",\"Type\"\n\"Salário\",\"100\",\"Receita Fixa\",\"Entrada\"\n\"Freelance\",\"1500\",\"Receita Extra\",\"Entrada\"\n\"paciente 1\",\"250\",\"pacientes\",\"Entrada\"\n\"Salário\",\"5000\",\"Salário\",\"Entrada\"\n\"Aluguel\",\"750\",\"Moradia\",\"Saída\"\n\"Supermercado\",\"600\",\"Alimentação\",\"Saída\"\n\"Restaurante\",\"100\",\"Alimentação\",\"Saída\"\n\"Academia\",\"50\",\"Lazer\",\"Saída\"\n\"Investimento Ações\",\"1500\",\"Investimentos\",\"Saída\"","type":"text"},{"name":"controle.xlsx","content":"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\nAKSBTAYAAHhsL3ByaW50ZXJTZXR0aW5ncy9wcmludGVyU2V0dGluZ3MxLmJpblBLAQIXAxQA\nCAgIAK95Y1mtsV0oNwEAAJQRAAAnAAAAAAAAAAAAAACkgdgHAAB4bC9wcmludGVyU2V0dGlu\nZ3MvcHJpbnRlclNldHRpbmdzMi5iaW5QSwECFwMUAAgICACveWNZ1G6+aM0AAAAAAgAAFAAA\nAAAAAAAAAAAApIFkCQAAeGwvc2hhcmVkU3RyaW5ncy54bWxQSwECFwMUAAgICACveWNZHeeO\nDdABAABnBAAADQAAAAAAAAAAAAAApIFzCgAAeGwvc3R5bGVzLnhtbFBLAQIXAxQACAgIAK95\nY1mMmA8FUQUAAKMbAAATAAAAAAAAAAAAAACkgX4MAAB4bC90aGVtZS90aGVtZTEueG1sUEsB\nAhcDFAAICAgAr3ljWQlW74CXAQAA9gMAAA8AAAAAAAAAAAAAAKSBEBIAAHhsL3dvcmtib29r\nLnhtbFBLAQIXAxQACAgIAK95Y1l3R1jw3wAAAGQCAAAjAAAAAAAAAAAAAACkgeQTAAB4bC93\nb3Jrc2hlZXRzL19yZWxzL3NoZWV0MS54bWwucmVsc1BLAQIXAxQACAgIAK95Y1nHEiSy3wAA\nAGQCAAAjAAAAAAAAAAAAAACkgRQVAAB4bC93b3Jrc2hlZXRzL19yZWxzL3NoZWV0Mi54bWwu\ncmVsc1BLAQIXAxQACAgIAK95Y1ky7H5nRAIAANIFAAAYAAAAAAAAAAAAAACkgUQWAAB4bC93\nb3Jrc2hlZXRzL3NoZWV0MS54bWxQSwECFwMUAAgICACveWNZY3wA0TYCAABsBQAAGAAAAAAA\nAAAAAAAApIHOGAAAeGwvd29ya3NoZWV0cy9zaGVldDIueG1sUEsFBgAAAAAPAA8AEgQAAEob\nAAAAAA==","type":"binary"},{"name":"orcamento.R","content":"# Carregue as bibliotecas necessárias\nlibrary(shiny)\nlibrary(DT)\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(openxlsx)\nlibrary(shinyjs)\nlibrary(bslib)\n\n# UI\nui <- fluidPage(\n  theme = bs_theme(bootswatch = \"flatly\"),  # Tema inicial\n  useShinyjs(),  # Ativa o shinyjs para funcionalidades adicionais\n  titlePanel(\"Orçamento Mensal\"),  # Título do aplicativo\n  \n  # Seção para carregar e exportar dados de um arquivo CSV\n  fluidRow(\n    column(width = 6, fileInput(\"file_input\", \"Escolher Arquivo CSV\", accept = c(\".csv\"))),\n    column(width = 4, downloadButton(\"export_data\", \"Exportar para CSV\"))  # Botão para exportar dados para CSV\n  ),\n  \n  # Painel principal com cards para diferentes visualizações\n  fluidRow(\n    # Card para tabela de entradas\n    column(\n      width = 12,\n      div(class = \"card\", style = \"margin: 10px;\",\n          div(class = \"card-header\", h4(\"Tabela de Entradas\")),\n          div(class = \"card-body\",\n              fluidRow(\n                column(width = 3, textInput(\"entry_name\", \"Nome da Entrada\")),\n                column(width = 3, numericInput(\"entry_amount\", \"Valor da Entrada\", value = 0)),\n                column(width = 3, textInput(\"entry_category\", \"Categoria da Entrada\")),\n                column(width = 3, actionButton(\"add_entry\", \"Adicionar Entrada\"),\n                       actionButton(\"remove_entry\", \"Remover Entrada Selecionada\"))\n              ),\n              DTOutput(\"entries_table\")\n          )\n      )\n    )\n  ),\n  fluidRow(\n    # Card para tabela de saídas\n    column(\n      width = 12,\n      div(class = \"card\", style = \"margin: 10px;\",\n          div(class = \"card-header\", h4(\"Tabela de Saídas\")),\n          div(class = \"card-body\",\n              fluidRow(\n                column(width = 3, textInput(\"expense_name\", \"Nome da Saída\")),\n                column(width = 3, numericInput(\"expense_amount\", \"Valor da Saída\", value = 0)),\n                column(width = 3, textInput(\"expense_category\", \"Categoria da Saída\")),\n                column(width = 3, actionButton(\"add_expense\", \"Adicionar Saída\"),\n                       actionButton(\"remove_expense\", \"Remover Saída Selecionada\"))\n              ),\n              DTOutput(\"expenses_table\")\n          )\n      )\n    )\n  ),\n  fluidRow(\n    # Card para análise financeira\n    column(\n      width = 12,\n      div(class = \"card\", style = \"margin: 10px;\",\n          div(class = \"card-header\", h4(\"Análise Financeira\")),\n          div(class = \"card-body\", plotlyOutput(\"financial_plot\"))\n      )\n    )\n  ),\n  fluidRow(\n    # Card para balanço final e separação do orçamento\n    column(\n      width = 12,\n      div(class = \"card\", style = \"margin: 10px;\",\n          div(class = \"card-header\", h4(\"Balanço Final e Separação do Orçamento\")),\n          div(class = \"card-body\", plotlyOutput(\"balance_plot\"))\n      )\n    )\n  )\n)\n\n# Server\nserver <- function(input, output, session) {\n  # Carrega dados do CSV inicial ou inicializa com dataframes vazios\n  if (file.exists(\"controle.csv\")) {\n    full_data <- read.csv(\"controle.csv\")\n    entries_df <- full_data %>% filter(Type == \"Entrada\") %>% select(-Type)\n    expenses_df <- full_data %>% filter(Type == \"Saída\") %>% select(-Type)\n  } else {\n    entries_df <- data.frame(Name = character(), Amount = numeric(), Category = character(), stringsAsFactors = FALSE)\n    expenses_df <- data.frame(Name = character(), Amount = numeric(), Category = character(), stringsAsFactors = FALSE)\n  }\n  \n  # Cria reativos para armazenar as entradas e saídas\n  entries <- reactiveVal(entries_df)\n  expenses <- reactiveVal(expenses_df)\n  \n  # Observa mudanças e salva dados em controle.csv\n  save_data_to_csv <- function() {\n    full_data <- bind_rows(\n      entries() %>% mutate(Type = \"Entrada\"),\n      expenses() %>% mutate(Type = \"Saída\")\n    )\n    write.csv(full_data, \"controle.csv\", row.names = FALSE)\n  }\n  \n  observeEvent(entries(), { save_data_to_csv() })\n  observeEvent(expenses(), { save_data_to_csv() })\n  \n  # Adiciona uma nova entrada\n  observeEvent(input$add_entry, {\n    new_entry <- data.frame(Name = input$entry_name, Amount = input$entry_amount, Category = input$entry_category, stringsAsFactors = FALSE)\n    entries(rbind(entries(), new_entry))\n  })\n  \n  # Remove a entrada selecionada\n  observeEvent(input$remove_entry, {\n    selected <- input$entries_table_rows_selected\n    if (length(selected) > 0) {\n      entries(entries()[-selected, ])\n    }\n  })\n  \n  # Adiciona uma nova saída\n  observeEvent(input$add_expense, {\n    new_expense <- data.frame(Name = input$expense_name, Amount = input$expense_amount, Category = input$expense_category, stringsAsFactors = FALSE)\n    expenses(rbind(expenses(), new_expense))\n  })\n  \n  # Remove a saída selecionada\n  observeEvent(input$remove_expense, {\n    selected <- input$expenses_table_rows_selected\n    if (length(selected) > 0) {\n      expenses(expenses()[-selected, ])\n    }\n  })\n  \n  # Renderiza as tabelas\n  output$entries_table <- renderDT({ datatable(entries(), selection = 'single') })\n  output$expenses_table <- renderDT({ datatable(expenses(), selection = 'single') })\n  \n  # Carrega dados automaticamente assim que o arquivo é selecionado\n  observeEvent(input$file_input, {\n    req(input$file_input)\n    full_data <- read.csv(input$file_input$datapath)\n    entries(full_data %>% filter(Type == \"Entrada\") %>% select(-Type))\n    expenses(full_data %>% filter(Type == \"Saída\") %>% select(-Type))\n  })\n  \n  # Cria um gráfico interativo das entradas e saídas categorizadas\n  output$financial_plot <- renderPlotly({\n    all_data <- bind_rows(\n      entries() %>% mutate(Type = \"Entrada\"),\n      expenses() %>% mutate(Type = \"Saída\") %>% mutate(Amount = -Amount)\n    ) %>%\n      group_by(Category, Type) %>%\n      summarise(Total = sum(Amount, na.rm = TRUE)) %>%\n      ungroup()\n    \n    plot_ly(all_data, x = ~Category, y = ~Total, color = ~Type, type = 'bar', text = ~Total, textposition = 'outside') %>%\n      layout(title = \"Análise Financeira por Categoria\")\n  })\n  \n  # Cria um gráfico para balanço final e separação do orçamento\n  output$balance_plot <- renderPlotly({\n    total_entry <- sum(entries()$Amount, na.rm = TRUE)\n    total_expense <- sum(expenses()$Amount, na.rm = TRUE)\n    balance <- total_entry - total_expense\n    \n    receitas_fixas <- total_entry * 0.5\n    investimentos <- total_entry * 0.3\n    lazer <- total_entry * 0.2\n    \n    balance_data <- data.frame(\n      Categoria = c(\"Balanço Total\", \"Receitas Fixas\", \"Investimentos\", \"Lazer\"),\n      Valor = c(balance, receitas_fixas, investimentos, lazer)\n    )\n    \n    plot_ly(balance_data, x = ~Categoria, y = ~Valor, type = 'bar', text = ~Valor, textposition = 'outside') %>%\n      layout(title = \"Balanço Final e Separação do Orçamento\")\n  })\n  \n  # Exporta as entradas e saídas para um arquivo CSV\n  output$export_data <- downloadHandler(\n    filename = function() { paste(\"Orcamento_Mensal\", Sys.Date(), \".csv\", sep = \"\") },\n    content = function(file) {\n      full_data <- bind_rows(\n        entries() %>% mutate(Type = \"Entrada\"),\n        expenses() %>% mutate(Type = \"Saída\")\n      )\n      write.csv(full_data, file, row.names = FALSE)\n    }\n  )\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n","type":"text"}]
